1) import random

# Генерация случайного шага от 3 до 5
step = random.randint(3, 5)

# Создание массива отсортированных чисел от 10 до 250 млн. с учетом шага
start_num = 10
end_num = 250000000
sorted_array = list(range(start_num, end_num + 1, step))

print(sorted_array[:10])  # Вывод первых 10 элементов для проверки

2) import random

# Генерация 10 случайных чисел с помощью list comprehensions и random.randint
random_numbers = [random.randint(1, 100) for _ in range(10)]

print(random_numbers)

3)  def linear_search(array, target):
    """
    Функция для линейного поиска элемента в массиве.

    Параметры:
    - array: список, в котором производится поиск.
    - target: элемент, который необходимо найти.

    Возвращает индекс первого вхождения элемента в массиве, если элемент найден,
    или -1, если элемент не найден.
    """
    for i in range(len(array)):
        if array[i] == target:
            return i
    return -1

# Пример использования:
my_array = [3, 6, 2, 8, 1, 9, 4]
target_element = 8
result = linear_search(my_array, target_element)
if result != -1:
    print(f"Элемент {target_element} найден на позиции {result}.")
else:
    print(f"Элемент {target_element} не найден в массиве.")

4)  def binary_search(array, target):
    """
    Функция для бинарного поиска элемента в отсортированном массиве.

    Параметры:
    - array: отсортированный список, в котором производится поиск.
    - target: элемент, который необходимо найти.

    Возвращает индекс элемента в массиве, если элемент найден,
    или -1, если элемент не найден.
    """
    low = 0
    high = len(array) - 1

    while low <= high:
        mid = (low + high) // 2
        if array[mid] == target:
            return mid
        elif array[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1

# Пример использования:
my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
target_element = 6
result = binary_search(my_array, target_element)
if result != -1:
    print(f"Элемент {target_element} найден на позиции {result}.")
else:
    print(f"Элемент {target_element} не найден в массиве.")

5) import random
import time

# Функция для линейного поиска
def linear_search(array, target):
    for i in range(len(array)):
        if array[i] == target:
            return i
    return -1

# Функция для бинарного поиска
def binary_search(array, target):
    low = 0
    high = len(array) - 1
    while low <= high:
        mid = (low + high) // 2
        if array[mid] == target:
            return mid
        elif array[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# Сгенерированные ранее случайные числа
random_numbers = [random.randint(10, 250000000) for _ in range(10)]

# Замер времени выполнения линейного поиска
start_time = time.time()
for num in random_numbers:
    linear_search_result = linear_search(sorted_array, num)
    if linear_search_result != -1:
        print(f"Число {num} найдено на позиции {linear_search_result} с помощью линейного поиска.")
    else:
        print(f"Число {num} не найдено в массиве с помощью линейного поиска.")
linear_search_time = time.time() - start_time
print("Время выполнения линейного поиска:", linear_search_time)

# Замер времени выполнения бинарного поиска
start_time = time.time()
for num in random_numbers:
    binary_search_result = binary_search(sorted_array, num)
    if binary_search_result != -1:
        print(f"Число {num} найдено на позиции {binary_search_result} с помощью бинарного поиска.")
    else:
        print(f"Число {num} не найдено в массиве с помощью бинарного поиска.")
binary_search_time = time.time() - start_time
print("Время выполнения бинарного поиска:", binary_search_time)
